// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RestTest;

#nullable disable

namespace ScholarMeServer.Migrations
{
    [DbContext(typeof(ScholarMeDbContext))]
    [Migration("20241216041303_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RestTest.Models.Flashcard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FlashcardDeckId")
                        .HasColumnType("uuid");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FlashcardDeckId");

                    b.ToTable("Flashcards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("94e872b1-f671-402d-8db9-75f9d325c2e8"),
                            CreatedAt = new DateTime(2024, 12, 16, 4, 13, 1, 847, DateTimeKind.Utc).AddTicks(3104),
                            FlashcardDeckId = new Guid("ffdb410f-5f2c-4c15-91b0-08d779689fc7"),
                            Question = "What is the capital of France?",
                            UpdatedAt = new DateTime(2024, 12, 16, 4, 13, 1, 847, DateTimeKind.Utc).AddTicks(3283)
                        });
                });

            modelBuilder.Entity("RestTest.Models.FlashcardChoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Choice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FlashcardId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAnswer")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FlashcardId");

                    b.ToTable("FlashcardChoices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1dc90e8-b429-4f69-b5e6-b74b05e032e0"),
                            Choice = "Paris",
                            CreatedAt = new DateTime(2024, 12, 16, 4, 13, 1, 847, DateTimeKind.Utc).AddTicks(4250),
                            FlashcardId = new Guid("94e872b1-f671-402d-8db9-75f9d325c2e8"),
                            IsAnswer = true,
                            UpdatedAt = new DateTime(2024, 12, 16, 4, 13, 1, 847, DateTimeKind.Utc).AddTicks(4377)
                        },
                        new
                        {
                            Id = new Guid("9bb18ba2-3670-486e-8f55-0607fad14a14"),
                            Choice = "London",
                            CreatedAt = new DateTime(2024, 12, 16, 4, 13, 1, 847, DateTimeKind.Utc).AddTicks(4588),
                            FlashcardId = new Guid("94e872b1-f671-402d-8db9-75f9d325c2e8"),
                            IsAnswer = false,
                            UpdatedAt = new DateTime(2024, 12, 16, 4, 13, 1, 847, DateTimeKind.Utc).AddTicks(4588)
                        },
                        new
                        {
                            Id = new Guid("35e72846-6482-4155-abf8-1863105bbffd"),
                            Choice = "Berlin",
                            CreatedAt = new DateTime(2024, 12, 16, 4, 13, 1, 847, DateTimeKind.Utc).AddTicks(4591),
                            FlashcardId = new Guid("94e872b1-f671-402d-8db9-75f9d325c2e8"),
                            IsAnswer = false,
                            UpdatedAt = new DateTime(2024, 12, 16, 4, 13, 1, 847, DateTimeKind.Utc).AddTicks(4591)
                        });
                });

            modelBuilder.Entity("RestTest.Models.FlashcardDeck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("FlashcardDecks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ffdb410f-5f2c-4c15-91b0-08d779689fc7"),
                            CreatedAt = new DateTime(2024, 12, 16, 4, 13, 1, 847, DateTimeKind.Utc).AddTicks(2121),
                            Description = "This is the first flashcard set",
                            Title = "Flashcard Set 1",
                            UpdatedAt = new DateTime(2024, 12, 16, 4, 13, 1, 847, DateTimeKind.Utc).AddTicks(2256),
                            UserAccountId = new Guid("e9832949-5c3c-4678-ad08-b8abbf32e17c")
                        });
                });

            modelBuilder.Entity("RestTest.Models.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9832949-5c3c-4678-ad08-b8abbf32e17c"),
                            CreatedAt = new DateTime(2024, 12, 16, 4, 13, 1, 847, DateTimeKind.Utc).AddTicks(513),
                            Email = "cher@gmail.com",
                            FirstName = "Teach",
                            LastName = "Cher",
                            Password = "$2a$11$VoDF6zKA859j7uNqe02JV.2LrFAqbw3AHfWLyaQstjNhHa.SsfJDi",
                            UpdatedAt = new DateTime(2024, 12, 16, 4, 13, 1, 847, DateTimeKind.Utc).AddTicks(734),
                            Username = "cher"
                        });
                });

            modelBuilder.Entity("ScholarMeServer.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiresOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("RestTest.Models.Flashcard", b =>
                {
                    b.HasOne("RestTest.Models.FlashcardDeck", "FlashcardDeck")
                        .WithMany("Flashcards")
                        .HasForeignKey("FlashcardDeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlashcardDeck");
                });

            modelBuilder.Entity("RestTest.Models.FlashcardChoice", b =>
                {
                    b.HasOne("RestTest.Models.Flashcard", "Flashcard")
                        .WithMany("Choices")
                        .HasForeignKey("FlashcardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flashcard");
                });

            modelBuilder.Entity("RestTest.Models.FlashcardDeck", b =>
                {
                    b.HasOne("RestTest.Models.UserAccount", "UserAccount")
                        .WithMany("FlashcardDecks")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("ScholarMeServer.Models.RefreshToken", b =>
                {
                    b.HasOne("RestTest.Models.UserAccount", "UserAccount")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("RestTest.Models.Flashcard", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("RestTest.Models.FlashcardDeck", b =>
                {
                    b.Navigation("Flashcards");
                });

            modelBuilder.Entity("RestTest.Models.UserAccount", b =>
                {
                    b.Navigation("FlashcardDecks");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
