// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RestTest;

#nullable disable

namespace ScholarMeServer.Migrations
{
    [DbContext(typeof(ScholarMeDbContext))]
    partial class ScholarMeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RestTest.Models.Flashcard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FlashcardDeckId")
                        .HasColumnType("uuid");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FlashcardDeckId");

                    b.ToTable("Flashcards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41e2e4af-abd9-4832-ae73-86798d0e534b"),
                            CreatedAt = new DateTime(2024, 12, 15, 11, 18, 1, 772, DateTimeKind.Utc).AddTicks(2410),
                            FlashcardDeckId = new Guid("aab90a73-75c1-4e61-b948-02d3397e21ee"),
                            Question = "What is the capital of France?",
                            UpdatedAt = new DateTime(2024, 12, 15, 11, 18, 1, 772, DateTimeKind.Utc).AddTicks(2473)
                        });
                });

            modelBuilder.Entity("RestTest.Models.FlashcardChoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Choice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FlashcardId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAnswer")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FlashcardId");

                    b.ToTable("FlashcardChoices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c2eee04b-f123-4809-915e-1db2032c20d9"),
                            Choice = "Paris",
                            CreatedAt = new DateTime(2024, 12, 15, 11, 18, 1, 772, DateTimeKind.Utc).AddTicks(2934),
                            FlashcardId = new Guid("41e2e4af-abd9-4832-ae73-86798d0e534b"),
                            IsAnswer = true,
                            UpdatedAt = new DateTime(2024, 12, 15, 11, 18, 1, 772, DateTimeKind.Utc).AddTicks(2997)
                        },
                        new
                        {
                            Id = new Guid("9b8839c3-58f1-4518-be94-4f923dc2f52c"),
                            Choice = "London",
                            CreatedAt = new DateTime(2024, 12, 15, 11, 18, 1, 772, DateTimeKind.Utc).AddTicks(3060),
                            FlashcardId = new Guid("41e2e4af-abd9-4832-ae73-86798d0e534b"),
                            IsAnswer = false,
                            UpdatedAt = new DateTime(2024, 12, 15, 11, 18, 1, 772, DateTimeKind.Utc).AddTicks(3060)
                        },
                        new
                        {
                            Id = new Guid("9649769f-9c9b-4175-b668-b2bc104a5b58"),
                            Choice = "Berlin",
                            CreatedAt = new DateTime(2024, 12, 15, 11, 18, 1, 772, DateTimeKind.Utc).AddTicks(3062),
                            FlashcardId = new Guid("41e2e4af-abd9-4832-ae73-86798d0e534b"),
                            IsAnswer = false,
                            UpdatedAt = new DateTime(2024, 12, 15, 11, 18, 1, 772, DateTimeKind.Utc).AddTicks(3062)
                        });
                });

            modelBuilder.Entity("RestTest.Models.FlashcardDeck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("FlashcardDecks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aab90a73-75c1-4e61-b948-02d3397e21ee"),
                            CreatedAt = new DateTime(2024, 12, 15, 11, 18, 1, 772, DateTimeKind.Utc).AddTicks(1907),
                            Description = "This is the first flashcard set",
                            Title = "Flashcard Set 1",
                            UpdatedAt = new DateTime(2024, 12, 15, 11, 18, 1, 772, DateTimeKind.Utc).AddTicks(1975),
                            UserAccountId = new Guid("535f49f4-bd0f-4bf4-aa48-7fca28f329e9")
                        });
                });

            modelBuilder.Entity("RestTest.Models.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("535f49f4-bd0f-4bf4-aa48-7fca28f329e9"),
                            CreatedAt = new DateTime(2024, 12, 15, 11, 18, 1, 772, DateTimeKind.Utc).AddTicks(1033),
                            Email = "cher@gmail.com",
                            FirstName = "Teach",
                            LastName = "Cher",
                            Password = "$2a$11$4ea5m6VbQnQtlEP36QTh9etC2gcbBg.v9V4gPXOs/1H1j.rstd5Zu",
                            UpdatedAt = new DateTime(2024, 12, 15, 11, 18, 1, 772, DateTimeKind.Utc).AddTicks(1177),
                            Username = "cher"
                        });
                });

            modelBuilder.Entity("ScholarMeServer.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiresOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("RestTest.Models.Flashcard", b =>
                {
                    b.HasOne("RestTest.Models.FlashcardDeck", "FlashcardDeck")
                        .WithMany("Flashcards")
                        .HasForeignKey("FlashcardDeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlashcardDeck");
                });

            modelBuilder.Entity("RestTest.Models.FlashcardChoice", b =>
                {
                    b.HasOne("RestTest.Models.Flashcard", "Flashcard")
                        .WithMany("Choices")
                        .HasForeignKey("FlashcardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flashcard");
                });

            modelBuilder.Entity("RestTest.Models.FlashcardDeck", b =>
                {
                    b.HasOne("RestTest.Models.UserAccount", "UserAccount")
                        .WithMany("FlashcardDecks")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("ScholarMeServer.Models.RefreshToken", b =>
                {
                    b.HasOne("RestTest.Models.UserAccount", "UserAccount")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("RestTest.Models.Flashcard", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("RestTest.Models.FlashcardDeck", b =>
                {
                    b.Navigation("Flashcards");
                });

            modelBuilder.Entity("RestTest.Models.UserAccount", b =>
                {
                    b.Navigation("FlashcardDecks");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
